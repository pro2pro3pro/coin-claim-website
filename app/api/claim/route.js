import { NextResponse } from "next/server";

// T·∫°m l∆∞u state trong RAM ƒë·ªÉ test. Khi live th√¨ thay b·∫±ng Redis/DB.
const claims = new Map();

export async function POST(req) {
  const { subid } = await req.json();
  if (!subid || subid.length < 5) {
    return NextResponse.json({ error: "SubID kh√¥ng h·ª£p l·ªá." }, { status: 400 });
  }

  // L·∫•y domain t·ª´ subid
  const domain = getDomainFromSubid(subid);

  // X√°c ƒë·ªãnh s·ªë l∆∞·ª£t cho t·ª´ng domain
  let maxClaims = 0;
  if (domain === "yeumoney.com") maxClaims = 2;
  else if (domain === "link4m.com" || domain === "bbmkts.com") maxClaims = 1;
  else
    return NextResponse.json(
      { error: "SubID kh√¥ng thu·ªôc link h·ª£p l·ªá." },
      { status: 400 }
    );

  // X√°c ƒë·ªãnh ng√†y hi·ªán t·∫°i (theo UTC, ho·∫∑c ƒë·ªïi sang m√∫i gi·ªù b·∫°n mu·ªën)
  const today = new Date().toISOString().split("T")[0];

  // T·∫°o key l∆∞u theo subid + ng√†y
  const key = `${subid}_${today}`;

  const currentClaims = claims.get(key) || 0;

  if (currentClaims >= maxClaims) {
    return NextResponse.json(
      { error: `B·∫°n ƒë√£ h·∫øt l∆∞·ª£t claim cho link ${domain} h√¥m nay.` },
      { status: 400 }
    );
  }

  // L∆∞u +1 l∆∞·ª£t
  claims.set(key, currentClaims + 1);

  // G·ª≠i webhook v·ªÅ Discord (n·∫øu mu·ªën) ‚Äî b·ªè comment ƒë·ªÉ x√†i
  /*
  fetch("https://discord.com/api/webhooks/WEBHOOK_ID", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      content: `ü™ô Ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n coin th√†nh c√¥ng v·ªõi subid: ${subid}`,
    }),
  }).catch(console.error);
  */

  return NextResponse.json({
    message: `Nh·∫≠n coin th√†nh c√¥ng cho link ${domain}. (${currentClaims + 1}/${maxClaims})`,
  });
}

// H√†m t√°ch domain t·ª´ subid
function getDomainFromSubid(subid) {
  try {
    const url = new URL(subid.startsWith("http") ? subid : "https://" + subid);
    return url.hostname.replace("www.", "");
  } catch {
    return "";
  }
}
